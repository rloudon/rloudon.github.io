debug(randomForest(X, y))
c
debug(randomForest(X, y))
p
c
c
c
c
bhd_rf_mod = randomForest(X, y)
randomForest(X, y)
randomForest(X, y)
''
require(ICEbox)
require(ICEbox)
require(ICEbox)
require(ICEbox)
require(ICEbox)
require(ICEbox)
require(ICEbox)
require(randomForest)
require(MASS) #has Boston Housing data, Pima
########  regression example
data(Boston) #Boston Housing data
X = Boston
X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
rm(list=ls())
## Not run:
require(ICEbox)
require(randomForest)
require(MASS) #has Boston Housing data, Pima
########  regression example
data(Boston) #Boston Housing data
X = Boston
X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
bhd_rf_mod = randomForest(X, y)
## Not run:
require(ICEbox)
require(randomForest)
require(MASS) #has Boston Housing data, Pima
########  regression example
data(Boston) #Boston Housing data
X = Boston
X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
## Not run:
require(ICEbox)
require(randomForest)
require(MASS) #has Boston Housing data, Pima
########  regression example
data(Boston) #Boston Housing data
X = Boston
X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'cat', frac_to_build = .15)
X = Boston
#X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'cat', frac_to_build = .15)
X$cat <- factor(sample(letters[1:8], size=nrow(X), replace=T))
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'age', frac_to_build = .15)
plot(bhd.ice)
bhd_rf_mod = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'age', frac_to_build = .15)
bhd_rf_mod
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'age', frac_to_build = .15)
data(Boston) #Boston Housing data
X = Boston
y = X$medv
X$medv = NULL
## build a RF:
bhd_rf_mod = randomForest(X, y)
## Create an 'ice' object for the predictor "age":
bhd.ice = ice(object = bhd_rf_mod, X = X, y = y, predictor = 'age', frac_to_build = .15)
plot(bhd.ice)
Xpc <- prcomp(X)
Xpc$x
plot(Xpc$x[,1], Xpc$x[,2])
plot(Xpc$x[,1], Xpc$x[,2], col=y)
plot(Xpc$x[,1], Xpc$x[,2], col=y>median(y))
plot(Xpc$x[,1], Xpc$x[,2], col=y>median(y), pch=19)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(y>median(y), 'red', 'blue'), pch=19)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(y>median(y), 'red', 'blue'), pch=19, alpha=0.3)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(y>median(y), 'red', 'blue'), pch=19, cex=0.3)
predict(bhd_rf_mod, X)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(predict(bhd_rf_mod, X)>median(y), 'red', 'blue'), pch=19, cex=0.3)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(y>median(y), 'red', 'blue'), pch=19, cex=0.3)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(predict(bhd_rf_mod, X)>median(y), 'red', 'blue'), pch=19, cex=0.3)
cbind(predict(bhd_rf_mod, X), y)
plot(predict(bhd_rf_mod, X), y)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(y>median(y), 'red', 'blue'), pch=19, cex=0.3)
plot(Xpc$x[,1], Xpc$x[,2], col=ifelse(predict(bhd_rf_mod, X)>median(y), 'red', 'blue'), pch=19, cex=0.3)
library('devtools')
install_github('zmjones/edarf')
library('edarf')
library('edarf')
install_github('zmjones/edarf')
install.packages('lgfortran')
install.packages('gettext')
install.packages('libintl')
## might need to rebuild knitr to avoid "cairo graphics error
#library('devtools')
#install_github('yihui/knitr')
#library('knitr')
## source of code
#http://chepec.se/blog/2014/07/16/knitr-jekyll.html
#!/usr/bin/env Rscript
options(stringsAsFactors = F)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(site.path='/Users/abrooks/Documents/github/simpleblog/', overwriteAll=F, overwriteOne=NULL) {
if(!'package:knitr' %in% search()) library('knitr')
site.path <- site.path # directory of jekyll blog (including trailing slash)
rmd.path <- paste0(site.path, "_Rmd") # directory where your Rmd-files reside (relative to base)
fig.dir <- "assets/Rfig/" # directory to save figures
posts.path <- paste0(site.path, "_posts/articles/") # directory for converted markdown files
cache.path <- paste0(site.path, "_cache") # necessary for plots
render_jekyll(highlight = "pygments")
opts_knit$set(base.url = '/', base.dir = site.path)
opts_chunk$set(fig.path=fig.dir, fig.width=8.5, fig.height=5.25, dev='svg', cache=F,
warning=F, message=F, cache.path=cache.path, tidy=F)
setwd(rmd.path) # setwd to base
# some logic to help us avoid overwriting already existing md files
files.rmd <- data.frame(rmd = list.files(path = rmd.path,
full.names = T,
pattern = "\\.Rmd$",
ignore.case = T,
recursive = F), stringsAsFactors=F)
files.rmd$corresponding.md.file <- paste0(posts.path, "/", basename(gsub(pattern = "\\.Rmd$", replacement = ".md", x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
## determining which posts to overwrite from parameters overwriteOne & overwriteAll
files.rmd$md.overwriteAll <- overwriteAll
if(is.null(overwriteOne)==F) files.rmd$md.overwriteAll[grep(overwriteOne, files.rmd[,'rmd'], ignore.case=T)] <- T
files.rmd$md.render <- F
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == F) {
files.rmd$md.render[i] <- T
}
if ((files.rmd$corresponding.md.exists[i] == T) && (files.rmd$md.overwriteAll[i] == T)) {
files.rmd$md.render[i] <- T
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$md.render[i] == T) {
out.file <- knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = T)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
## actually using function
#KnitPost(overwriteOne='test', site.path='/Users/ajb/Documents/github/simpleblog/')
KnitPost(overwriteOne='kable', site.path='/Users/abrooks/Documents/github/simpleblog/')
KnitPost(overwriteOne='kable', site.path='/Users/abrooks/Documents/github/simpleblog/')
KnitPost(overwriteOne='kable', site.path='/Users/abrooks/Documents/github/simpleblog/')
?kable
data(ozone1)
a <- earth(O3 ~ ., data = ozone1, degree = 2)
plotmo(a)
library('plotmo')
library('MASS')
data(ozone1)
a <- earth(O3 ~ ., data = ozone1, degree = 2)
plotmo(a)
data(ozone1)
library('earth')
data(ozone1)
a <- earth(O3 ~ ., data = ozone1, degree = 2)
plotmo(a)
data(airquality)
airquality <- na.omit(airquality)
set.seed(131)
ozone.rf <- randomForest(Ozone ~ ., airquality)
partialPlot(ozone.rf, airquality, Temp)
data(iris)
set.seed(543)
iris.rf <- randomForest(Species~., iris)
partialPlot(iris.rf, iris, Petal.Width, "versicolor")
model.matrix(mpg~hp+qsec)
model.matrix(mpg~hp+qsec, mtcars)
?model.matrix
a<-model.matrix(mpg~hp+qsec, mtcars)
dim(a)
str(a)
class(a)
a
names(a)
length(a)
df <- mtcars
df[,'cyl'] <- as.character(df[,'cyl'])
a<-model.matrix(mpg~hp+qsec, df)
a
a<-model.matrix(mpg~hp+qsec+cyl, df)
a
model.matrix
library('foreign')
a<-read.dbf('/Users/abrooks/Downloads/nfirs_2011_120612/ems.dbf')
View(a)
dt <- data.table(mtcars)
dt[,gearL1:=lapply(gearsL, `[`, 2)]
dt <- data.table(mtcars)
library('data.table')
dt <- data.table(mtcars)
dt[,gearsL:=list(list(unique(gear))), by=cyl]
dt[,gearL1:=lapply(gearsL, `[`, 2)]
dt
dt[,gearL1s:=sapply(gearsL, `[`, 2)]
dt
dt$gearsL1l
dt$gearL1s
dt$gearL1l
dt$gearL1l
dt$gearL1s
dt$gearsL
dt[,gearL1l:=lapply(gearsL, `[`, 2)]
dt$gearsL1l
dt$gearL1l
KnitPost('/Users/abrooks/Documents/github/simpleblog/_Rmd/2015-08-31-advanced-data-table.Rmd',)
KnitPost
KnitPost(overwriteOne='advanced-data-table')
KnitPost(overwriteOne='advanced-data-table')
dt
dt
dt <- data.table(mtcars)
dt[,gearsL:=list(list(unique(gear))), by=cyl]
dt[,gearL1:=lapply(gearsL, `[`, 2)]
dt[,gearS1:=sapply(gearsL, `[`, 2)]
head(dt)
str(head(dt[,gearL1]))
str(head(dt[,gearS1]))
dt[,gearL1:=lapply(gearsL, function(x) x[2])]
dt[,gearS1:=sapply(gearsL, function(x) x[2])]
head(dt)
str(head(dt[,gearL1]))
str(head(dt[,gearS1]))
dt[,other_gear:=mapply(setdiff, gearsL, gear)]
dt
?`CJ`
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library('ggplotly')
install.packages('ggplotly')
library('ggplotly')
library('glotly')
library('plotly')
install.packages('plotly')
install_github('tdhock/ggplotly')
install_github('ropensci/plotly')
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
library(ggplot2)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
d <- diamonds
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
d <- diamonds
d <- data(diamonds)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
plotly:::verify("ajb073")
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library('ggplot2')
plotly:::verify("ajb073")
plotly:::verify("522z5qpdxj")
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
p
head(d)
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut))
p
plotly:::verify("ajb073")
plotly:::verify("522z5qpdxj")
library('plotly')
library('ggplot2')
plotly:::verify("ajb073")
plotly:::verify("522z5qpdxj")
plotly:::verify("ajb073")
plotly:::verify("522z5qpdxj")
signup('ajb073', 'andrewbrooksct@gmail.com')
p <- plotly(username="ajb073", key="522z5qpdxj")
p <- plot_ly(username="ajb073", key="522z5qpdxj")
p
ggp <- ggplot_ly(username="ajb073", key="522z5qpdxj")
ggp <- ggplotly(username="ajb073", key="522z5qpdxj")
ggp <- plot_ly(username="ajb073", key="522z5qpdxj")
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
(gg <- ggplotly(p))
plotly:::verify("ajb073")
plotly:::verify("522z5qpdxj")
KnitPost(overwriteOne='advanced-data')
KnitPost(overwriteOne='advanced-data')
dt<-data.table(mtcars)
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.BY], mean(mpg), by=cyl], by=gear] #unbiased mean
dt
dt
dt<-data.table(mtcars)
dt[, dt[!gear %in% unique(dt$gear)[.BY], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.BY[[1]]], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.BY[[1]]], .(mean(mpg),thing=.BY[[1]]), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear), .(mean(mpg),thing=.BY[[1]]), by=cyl], by=gear] #unbiased mean
dt[, .(mean(mpg),thing=.BY[[1]]), by=cyl], by=gear] #unbiased mean
dt[, .(mean(mpg), thing=.BY[[1]]), by=c(cyl, gear)] #unbiased mean
dt <- data.table(mtcars)[,.(cyl, gear, mpg)]
dt[, mpg_biased_mean:=mean(mpg), by=cyl]
head(dt)
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.BY[[1]]], mean(mpg), by=cyl], by=gear] #unbiased mean
mean(dt[cyl==4 & gear!=3,mpg]) # testing
mean(dt[cyl==6 & gear!=3,mpg]) # testing
mean(dt[cyl==8 & gear!=3,mpg]) # testing
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt
dt <- data.table(mtcars)
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.BY]), mean(mpg), by=cyl] , by=gear] #unbiased mean
uid
setkey(dt, gear)
uid <- unique(dt$gear)
setkey(dt, gear)
uid <- unique(dt$gear)
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.BY]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.BY[[1]]]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.BY[[2]]]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.GRP]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt[, dt[!.(uid[.BY[[2]]]), mean(mpg), by=cyl] , by=gear] #unbiased mean
dt
dt
dt[.(.BY, .GRP),by='cyl']
dt[,.(.BY, .GRP),by='cyl']
dt[,.`:=`(by1=.BY, grp1=.GRP),by='cyl']
dt[,`:=`(by1=.BY, grp1=.GRP),by='cyl']
dt
dt[,`:=`(by1=seq(.BY), grp1=.GRP),by='cyl']
dt
dt[,`:=`(by1=seq(.BY), grp1=.GRP),by='cyl']
dt[,.BY,by='cyl']
dt[,seq(.BY),by='cyl']
dt[,a:=seq(.BY),by='cyl']
dt
>.BY
?.BY
?`.BY`
?`BY`
?BY
?`\\.B`
?"data.table"
dt[,.BY,by='cyl']
dt[,.GRP,by='cyl']
dt[,.GRP,by=c('cyl', 'gear')]
dt[,.(.GRP, .BY) ,by=c('cyl', 'gear')]
dt[,.(.BY) ,by=c('cyl', 'gear')]
dt[,.(.GRP) ,by=c('cyl', 'gear')]
dt[,.(.BY) ,by=c('cyl', 'gear')]
dt[,.(.BY[[1]]) ,by=c('cyl', 'gear')]
dt[,.(.BY[[2]]) ,by=c('cyl', 'gear')]
dt[,.(.BY[[3]]) ,by=c('cyl', 'gear')]
dt[,.(.BY[[1]]) ,by=c('cyl', 'gear')]
dt[,.(.BY[[2]]) ,by=c('cyl', 'gear')]
dt[,.(a:=.BY[[2]]) ,by=c('cyl', 'gear')]
dt[,a:=.BY[[2]] ,by=c('cyl', 'gear')]
dt[,a:=.BY[[2]]L ,by=c('cyl', 'gear')]
dt[,a:=as.integer(.BY[[2]]) ,by=c('cyl', 'gear')]
dt
dt <- data.table(mtcars)[,.(cyl, gear, mpg)]
dt
dt[,a:=as.integer(.BY[[2]]) ,by=c('cyl', 'gear')]
dt
dt[,`:=`(by1=as.integer(.BY[[1]]), by2=as.integer(.BY[[2]]), byall=as.integer(.BY)) ,by=c('cyl', 'gear')]
dt[,`:=`(by1=as.integer(.BY[[1]]), by2=as.integer(.BY[[2]])) ,by=c('cyl', 'gear')]
dt
dt[, dt[!gear %in% unique(dt$gear)[.BY[[1]]], mean(mpg), by=cyl], by=gear]
dt[, mpg_biased_mean:=mean(mpg), by=cyl]
dt
dt[, mean(mpg), by=cyl]
dt[, mean(mpg), by=c(cyl,gear)]
dt[, mean(mpg), by=c('cyl','gear')]
dt[, dt[!gear %in% unique(dt$gear)[.BY[[1]]], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% .BY[[1]], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dtb <- rbindlist(rep(dt, 1000))
dtb <- rbindlist(replicate(dt, 1000))
dtb <- rbindlist(replicate(1000, dt))
dtb <- rep(1:nrow(dt), 10)
dtb <- rep(1:nrow(dt), 10)
dtb
dt <- dt[rep(1:nrow(dt), 100000),]
dim(dt)
system.time(dt[, dt[!gear %in% .BY[[1]], mean(mpg), by=cyl], by=gear]) #unbiased mean
system.time(dt[, dt[!gear %in% .BY[[1]], mean(mpg), by=cyl], by=gear]) #unbiased mean
system.time(dt[, dt[!gear %in% .BY[[1]], mean(mpg), by=cyl], by=gear]) #unbiased mean
system.time(dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear]) #unbiased mean
dt <- data.table(mtcars)
dt
dt[,.BY, by=.(cyl, gear)]
dt[,.BY[[1]], by=.(cyl, gear)]
dt[,.gear, by=.(cyl, gear)]
dt[,gear, by=.(cyl, gear)]
dt[, .GRP, by=cyl]
dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl]
dt[,dt[, .(.GRP, unique(dt$gear)[.GRP]), by=cyl], by=gear]
dt[, .BY, by=cyl]
dt[, .BY[[1]], by=cyl]
dt[, .(.BY[[1]], unique(dt$gear)[.BY[[1]]]), by=cyl]
dt[, .(.BY[[1]], .BY[[2]]), by=.(cyl,gear)]
dt[, dt[, .(.BY[[1]], .BY[[2]]), by=cyl], by=gear]
dt[, dt[, .BY[[1]], by=cyl], by=gear]
dt[, dt[, .BY[[2]], by=cyl], by=gear]
dt[, dt[, .BY[[1]], by=cyl], by=gear]
dt[, dt[, gear %in% .BY[[1]], by=cyl], by=gear]
dt[, dt[, .(gear %in% .BY[[1]], .BY[[1]]), by=cyl], by=gear]
dt[, dt[, .(gear %in% .BY[[1]]), by=cyl], by=gear]
dt[, dt[, .(gear == .BY[[1]]), by=cyl], by=gear]
dt[, dt[, .(gear == .BY[[2]]), by=cyl], by=gear]
dt[, dt[!gear %in% unique(dt$gear)[.GRP], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[gear!=4 & cyl==6, mean(mpg)]
dt[, dt[!gear %in% .BY[[1]], mean(mpg), by=cyl], by=gear] #unbiased mean
dt[, .(.BY[[1]], .BY[[2]]), by=.(cyl,gear)]
dt[, dt[, .(gear %in% .BY[[1]]), by=cyl], by=gear]
dt[, dt[gear %in% .BY[[1]], , by=cyl], by=gear]
dt[, dt[gear %in% .BY[[1]], .BY, by=cyl], by=gear]
dt[, dt[,a:=list(setdiff(unique(gear), .BY[[1]])), .BY, by=cyl], by=gear]
dt[, dt[,a:=list(list(setdiff(unique(gear), .BY[[1]]))), by=cyl], by=gear]
dt <- data.table(mtcars)[,.(cyl, gear, mpg)]
dt[, mpg_biased_mean:=mean(mpg), by=cyl]
dt[, .BY[[1]], by=cyl]
dt[, .(.BY[[1]], .BY[[2]]), by=.(cyl,gear)]
dt[, dt[,a:=list(list(setdiff(unique(gear), .BY[[1]]))), by=cyl], by=gear]
dt[, dt[,a:=list(setdiff(unique(gear), .BY[[1]])), by=cyl], by=gear]
dt[, dt[,a:=list(list(setdiff(unique(gear), .BY[[1]]))), by=cyl], by=gear]
dt[, .BY[[1]], by=cyl]
dt[, .(.BY[[1]], .BY[[2]]), by=.(cyl,gear)]
dt[, dt[,.BY[[1]], by=cyl], by=gear]
dt[, dt[gear %in% .BY[[1]], by=cyl], by=gear]
dt[, dt[gear %in% .BY[[1]], 1:.N,  by=cyl], by=gear]
dt[, dt[,.BY[[1]],  by=cyl], by=gear]
KnitPost(overwrteOne='advanced-data-table')
KnitPost(overwriteOne='advanced-data-table')
?data.table
